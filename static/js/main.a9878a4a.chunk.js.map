{"version":3,"sources":["Display.tsx","Button.tsx","Counter.tsx","Input.tsx","SettingsCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","className","isShowCount","startValue","maxCount","error","Button","disabled","onClick","callBack","title","Counter","incCount","disabledInc","resetCount","disabledReset","setShowSettings","Input","type","value","onChange","SettingsCounter","e","setMaxCount","currentTarget","valueAsNumber","setDisabledBack","count","setDisabledSet","setError","setCount","setDisabledInc","setStartValue","setIsShowCount","localStorage","setItem","JSON","stringify","disabledSet","disabledBack","App","useState","setDisabledReset","showSettings","useEffect","valueAsString","getItem","saveValue","parse","newCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9878a4a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    startValue?: number\r\n    maxCount: number\r\n    error: string\r\n    isShowCount?: boolean\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n    return (\r\n        <div className={\"counter\"}>\r\n            {\r\n                props.isShowCount ?\r\n                    <span className={props.startValue === props.maxCount ? \"spn-error\" : \"spn\"}>{props.startValue}</span>\r\n                    : <span className={props.error === \"Incorrect value!\" ? \"spn-error\" : \"spn\"}>{props.error}</span>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    callBack: () => void\r\n    disabled: boolean\r\n\r\n}\r\n\r\nexport function Button(props: ButtonPropsType ) {\r\n\r\n\r\n    return (\r\n        <button disabled={props.disabled}\r\n                onClick={props.callBack}>{props.title}\r\n        </button>\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport {Display} from \"./Display\";\r\nimport {Button} from \"./Button\";\r\n\r\n\r\ntype CounterPropsType = {\r\n    startValue: number\r\n    maxCount: number\r\n    incCount: () => void\r\n    resetCount: () => void\r\n    setShowSettings:( value: boolean)=> void\r\n    disabledInc: boolean\r\n    disabledReset: boolean\r\n    error: string\r\n    isShowCount: boolean\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n\r\n    const incCount = () => props.incCount()\r\n    const resetCount = () => props.resetCount()\r\n    const showSettings = () => {\r\n        props.setShowSettings(true)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"wrapper\">\r\n                <Display startValue={props.startValue}\r\n                         maxCount={props.maxCount}\r\n                         error={props.error}\r\n                         isShowCount={props.isShowCount}/>\r\n                <div className=\"buttons\">\r\n                    <Button callBack={incCount}\r\n                            title={\"INC\"}\r\n                            disabled={props.disabledInc}\r\n\r\n                    />\r\n                    <Button callBack={resetCount}\r\n                            title={\"RESET\"}\r\n                            disabled={props.disabledReset}\r\n                    />\r\n                    <Button title={'settings'} callBack={showSettings} disabled={false}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error: string\r\n}\r\n\r\nexport function Input(props: InputPropsType) {\r\n    return (\r\n        <input type={\"number\"} value={props.value} onChange={props.onChange} className={ props.error === \"Incorrect value!\" ? \"input-settings-error\" : \"\"}/>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {Button} from \"./Button\";\r\nimport {Input} from \"./Input\";\r\nimport {Display} from \"./Display\";\r\n\r\n\r\ntype PropsType = {\r\n    count: number\r\n    maxCount: number\r\n    setCount: (value: number) => void\r\n    setMaxCount: (value: number) => void\r\n    disabledSet: boolean\r\n    disabledBack: boolean\r\n    setDisabledInc: (value: boolean) => void\r\n    setDisabledReset: (value: boolean) => void\r\n    setDisabledSet: (value: boolean) => void\r\n    setStartValue: (value: number) => void\r\n    error: string\r\n    setError: (value: string) => void\r\n    setIsShowCount: (value: boolean) => void\r\n    setShowSettings: (value: boolean) => void\r\n    setDisabledBack:(value: boolean) => void\r\n}\r\n\r\nexport function SettingsCounter(props: PropsType) {\r\n\r\n\r\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxCount(e.currentTarget.valueAsNumber)\r\n        props.setDisabledBack(true)\r\n        //props.setIsShowCount(false)\r\n        //props.setDisabledInc(true)\r\n        if (e.currentTarget.valueAsNumber <= 0 || e.currentTarget.valueAsNumber <= props.count || props.count < 0) {\r\n            props.setDisabledSet(true)\r\n            props.setError(\"Incorrect value!\")\r\n        } else {\r\n            props.setDisabledSet(false)\r\n            props.setError('Enter set')\r\n        }\r\n    }\r\n    const onChangeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setCount(e.currentTarget.valueAsNumber)\r\n        props.setDisabledBack(true)\r\n        //props.setIsShowCount(false)\r\n        //props.setDisabledInc(true)\r\n        if (e.currentTarget.valueAsNumber < 0 || props.count === e.currentTarget.valueAsNumber || e.currentTarget.valueAsNumber >= props.maxCount) {\r\n            props.setDisabledSet(true)\r\n            props.setError(\"Incorrect value!\")\r\n        } else {\r\n            props.setDisabledSet(false)\r\n            props.setError(\"Enter set\")\r\n        }\r\n    }\r\n    const onClickHandler = () => {\r\n        props.setDisabledInc(false)    //Разблокируется кнопка инкрремент\r\n        props.setDisabledSet(true)     //Блокируется кнопка сэт\r\n        props.setStartValue(props.count)     //При нажатии на кнопку сброса устанавливается это значение\r\n        props.setIsShowCount(true)     //Показывает на дисплее текущее числовое значение\r\n        props.setShowSettings(false)\r\n        props.setDisabledBack(false)\r\n        localStorage.setItem('minValue', JSON.stringify(props.count))\r\n        localStorage.setItem('maxValue', JSON.stringify(props.maxCount))\r\n    }\r\n\r\n    const goBack = () => {\r\n        props.setShowSettings(false)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"wrapper\">\r\n                <div><span>Settings</span></div>\r\n                <Display\r\n                         maxCount={props.maxCount}\r\n                         error={props.error}\r\n                        />\r\n                <div className={'container-input'}>\r\n                    <div className=\"input\">\r\n                        max value: <Input value={props.maxCount} onChange={onChangeMaxValueHandler}\r\n                                          error={props.error}/>\r\n                        start value: <Input value={props.count} onChange={onChangeStartValueHandler}\r\n                                            error={props.error}/>\r\n                        <div className={\"buttons-settings\"}>\r\n                            <Button title={\"set\"} callBack={onClickHandler} disabled={props.disabledSet}/>\r\n                            <Button title={\"back\"} callBack={goBack} disabled={props.disabledBack}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useEffect, useReducer, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport {SettingsCounter} from \"./SettingsCounter\";\n\n\nfunction App() {\n\n\n    let [count, setCount] = useState<number>(0)                            //Это значение которое выводится на дисплей\n    let [maxCount, setMaxCount] = useState<number>(5)\n    let [disabledInc, setDisabledInc] = useState<boolean>(false)\n    let [disabledReset, setDisabledReset] = useState<boolean>(true)\n    let [disabledSet, setDisabledSet] = useState<boolean>(true)\n    let [disabledBack, setDisabledBack] = useState<boolean>(false)\n    let [startValue, setStartValue] = useState<number>(count)\n    let [error, setError] = useState<string>('Enter set')\n    let [isShowCount, setIsShowCount] = useState<boolean>(true)\n    let [showSettings, setShowSettings] = useState<boolean>(false)\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('minValue')\n        if (valueAsString) {\n            let saveValue = JSON.parse(valueAsString)\n            setCount(saveValue)\n            setStartValue(saveValue)\n            setIsShowCount(true)\n            setDisabledInc(false)\n        }\n    }, [])\n\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('maxValue')\n        if (valueAsString) {\n            let saveValue = JSON.parse(valueAsString)\n            setMaxCount(saveValue)\n        }\n    }, [])\n\n\n    function incCount() {\n        let newCount = startValue + 1\n        setStartValue(newCount)\n        if (newCount === maxCount) {\n            setDisabledInc(true)\n        }\n        setDisabledReset(false)\n    }\n\n    function resetCount() {\n        setStartValue(count)\n        setDisabledInc(false)\n        setDisabledReset(true)\n    }\n\n\n    return (\n        <div>\n            {\n                showSettings ?\n                    <SettingsCounter\n                        count={count}\n                        maxCount={maxCount}\n                        setCount={setCount}\n                        setMaxCount={setMaxCount}\n                        disabledSet={disabledSet}\n                        disabledBack={disabledBack}\n                        setDisabledInc={setDisabledInc}\n                        setDisabledReset={setDisabledReset}\n                        setDisabledBack={setDisabledBack}\n                        setDisabledSet={setDisabledSet}\n                        setStartValue={setStartValue}\n                        error={error}\n                        setError={setError}\n                        setIsShowCount={setIsShowCount}\n                        setShowSettings={setShowSettings}\n                    />\n                   :\n                    <Counter startValue={startValue}\n                             disabledInc={disabledInc}\n                             disabledReset={disabledReset}\n                             maxCount={maxCount}\n                             incCount={incCount}\n                             resetCount={resetCount}\n                             error={error}\n                             isShowCount={isShowCount}\n                             setShowSettings={setShowSettings}\n                    />\n            }\n\n        </div>\n\n    )\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}