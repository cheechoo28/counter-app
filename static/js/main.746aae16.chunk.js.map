{"version":3,"sources":["Display.tsx","Button.tsx","Counter.tsx","Input.tsx","SettingsCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","console","log","isShowCount","className","startValue","maxCount","error","Button","disabled","onClick","callBack","title","Counter","incCount","disabledInc","resetCount","disabledReset","Input","type","value","onChange","SettingsCounter","e","setMaxCount","currentTarget","valueAsNumber","setIsShowCount","setDisabledReset","setDisabledInc","count","setDisabledSet","setError","setCount","setStartValue","localStorage","setItem","JSON","stringify","disabledSet","App","useState","useEffect","valueAsString","getItem","saveValue","parse","newCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.746aae16.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    startValue: number\r\n    maxCount: number\r\n    error: string\r\n    isShowCount: boolean\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n    console.log(props.isShowCount)\r\n    return (\r\n        <div className={\"counter\"}>\r\n            {\r\n                props.isShowCount ?\r\n                    <span className={props.startValue === props.maxCount ? \"spn-error\" : \"spn\"}>{props.startValue}</span>\r\n                    : <span className={props.error === \"Incorrect value!\" ? \"spn-error\" : \"spn\"}>{props.error}</span>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    callBack: () => void\r\n    disabled: boolean\r\n\r\n}\r\n\r\nexport function Button(props: ButtonPropsType ) {\r\n\r\n\r\n    return (\r\n        <button disabled={props.disabled}\r\n                onClick={props.callBack}>{props.title}\r\n        </button>\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport {Display} from \"./Display\";\r\nimport {Button} from \"./Button\";\r\n\r\n\r\ntype CounterPropsType = {\r\n    startValue: number\r\n    maxCount: number\r\n    incCount: () => void\r\n    resetCount: () => void\r\n    disabledInc: boolean\r\n    disabledReset: boolean\r\n    error: string\r\n    isShowCount: boolean\r\n\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n\r\n    const incCount = () => props.incCount()\r\n    const resetCount = () => props.resetCount()\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"wrapper\">\r\n                <Display startValue={props.startValue} maxCount={props.maxCount} error={props.error}\r\n                         isShowCount={props.isShowCount}/>\r\n                <div className=\"buttons\">\r\n                    <Button callBack={incCount}\r\n                            title={\"INC\"}\r\n                            disabled={props.disabledInc}\r\n\r\n                    />\r\n                    <Button callBack={resetCount}\r\n                            title={\"RESET\"}\r\n                            disabled={props.disabledReset}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error: string\r\n}\r\n\r\nexport function Input(props: InputPropsType) {\r\n    return (\r\n        <input type={\"number\"} value={props.value} onChange={props.onChange} className={ props.error === \"Incorrect value!\" ? \"input-settings-error\" : \"input-settings\"}/>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {Button} from \"./Button\";\r\nimport {Input} from \"./Input\";\r\n\r\n\r\ntype PropsType = {\r\n    count: number\r\n    maxCount: number\r\n    setCount: (value: number) => void\r\n    setMaxCount: (value: number) => void\r\n    disabledSet: boolean\r\n    setDisabledInc: (value: boolean) => void\r\n    setDisabledReset: (value: boolean) => void\r\n    setDisabledSet: (value: boolean) => void\r\n    setStartValue: (value: number) => void\r\n    error: string\r\n    setError: (value: string) => void\r\n    setIsShowCount: (value: boolean) => void\r\n}\r\n\r\nexport function SettingsCounter(props: PropsType) {\r\n\r\n\r\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxCount(e.currentTarget.valueAsNumber)\r\n        props.setIsShowCount(false)\r\n        props.setDisabledReset(true)\r\n        props.setDisabledInc(true)\r\n        if (e.currentTarget.valueAsNumber <= 0 || e.currentTarget.valueAsNumber <= props.count || props.count < 0) {\r\n            props.setDisabledSet(true)\r\n            props.setError(\"Incorrect value!\")\r\n        } else {\r\n            props.setDisabledSet(false)\r\n            props.setError('Enter set')\r\n        }\r\n    }\r\n    const onChangeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        props.setCount(e.currentTarget.valueAsNumber)\r\n        props.setIsShowCount(false)\r\n        props.setDisabledReset(true)\r\n        props.setDisabledInc(true)\r\n        if (e.currentTarget.valueAsNumber < 0 || props.count === e.currentTarget.valueAsNumber || e.currentTarget.valueAsNumber >= props.maxCount) {\r\n            props.setDisabledSet(true)\r\n            props.setError(\"Incorrect value!\")\r\n        } else {\r\n            props.setDisabledSet(false)\r\n            props.setError(\"Enter set\")\r\n        }\r\n    }\r\n    const onClickHandler = () => {\r\n        props.setDisabledInc(false)    //Разблокируется кнопка инкрремент\r\n        props.setDisabledSet(true)     //Блокируется кнопка сэт\r\n        props.setStartValue(props.count)     //При нажатии на кнопку сброса устанавливается это значение\r\n        props.setIsShowCount(true)     //Показывает на дисплее текущее числовое значение\r\n        localStorage.setItem('minValue', JSON.stringify(props.count))\r\n        localStorage.setItem('maxValue', JSON.stringify(props.maxCount))\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"wrapper\">\r\n                <div><span>Settings</span></div>\r\n                <div className={'container-input'}>\r\n                    <div className=\"input\">\r\n                        max value: <Input value={props.maxCount} onChange={onChangeMaxValueHandler}\r\n                                          error={props.error}/>\r\n                        start value: <Input value={props.count} onChange={onChangeStartValueHandler}\r\n                                            error={props.error}/>\r\n                        <Button title={\"set\"} callBack={onClickHandler} disabled={props.disabledSet}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport {SettingsCounter} from \"./SettingsCounter\";\n\n\nfunction App() {\n\n    let [count, setCount] = useState<number>(0)                            //Это значение которое выводится на дисплей\n    let [maxCount, setMaxCount] = useState<number>(0)\n    let [disabledInc, setDisabledInc] = useState<boolean>(true)\n    let [disabledReset, setDisabledReset] = useState<boolean>(true)\n    let [disabledSet, setDisabledSet] = useState<boolean>(true)\n    let [startValue, setStartValue] = useState<number>(count)\n    let [error, setError] = useState<string>('Enter set')\n    let [isShowCount, setIsShowCount] = useState<boolean>(false)\n\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('minValue')\n        if (valueAsString) {\n            let saveValue = JSON.parse(valueAsString)\n            setCount(saveValue)\n            setStartValue(saveValue)\n            setIsShowCount(true)\n            setDisabledInc(false)\n        }\n    }, [])\n\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('maxValue')\n        if (valueAsString) {\n            let saveValue = JSON.parse(valueAsString)\n            setMaxCount(saveValue)\n        }\n    }, [])\n\n\n    function incCount() {\n        let newCount = startValue + 1\n        setStartValue(newCount)\n        if (newCount === maxCount) {\n            setDisabledInc(true)\n        }\n        setDisabledReset(false)\n    }\n\n    function resetCount() {\n        setStartValue(count)\n        setDisabledInc(false)\n        setDisabledReset(true)\n    }\n\n\n    return (\n        <div className={\"cont\"}>\n            <SettingsCounter\n                count={count}\n                maxCount={maxCount}\n                setCount={setCount}\n                setMaxCount={setMaxCount}\n                disabledSet={disabledSet}\n                setDisabledInc={setDisabledInc}\n                setDisabledReset={setDisabledReset}\n                setDisabledSet={setDisabledSet}\n                setStartValue={setStartValue}\n                error={error}\n                setError={setError}\n                setIsShowCount={setIsShowCount}\n            />\n            <Counter startValue={startValue}\n                     disabledInc={disabledInc}\n                     disabledReset={disabledReset}\n                     maxCount={maxCount}\n                     incCount={incCount}\n                     resetCount={resetCount}\n                     error={error}\n                     isShowCount={isShowCount}\n\n            />\n        </div>\n\n    )\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}